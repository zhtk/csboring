Notes on interpreter
=============================
Running interpreter: ./interpreter file or ./interpreter < file

Interpreter has 3 parts:
- Main.hs - loads file with program, then perform static check, execute
  program and in case of error shows error message.
- Static.hs - contains routines for static check
- Exec.hs - execute program

Other files were generated by BNFC. I have slightly modified Abslang.hs,
so it contains data structures for storing variables in Store and some
other type declarations such as InterState. InterState contains environment,
store and allocation pointer. I was also thinking about using Dynamic
capabilities of haskell, but in the end haven't used them.

During static check following errors are produced:

 Main - related errors:
  Error: main should not take arguments
  Error: main is not a function
  Error: main definition not found in store
  Error: main is not specified

 Errors related to type check in expressions:
  Undefined variable: %s
  Type error: expected variable, but %s is a function
  Error: %type expected in ...
  Error: type mismatch in ...
  Error: operator (0-) expected TInt, got ...

 Errors in expressions related to indexing arrays or dictionaries:
  Error: %s table index expected (TInt), got %s
  Error: %s dictionary key expected %s, got %s
  Error: expected that %s is a table or dict
  Error: undefined table/dict %s

 Errors related to function calls:
  Error: argument %s type mismatch, expected %s got %s
  Error: Too small number of passed arguments
  Error: Too many passed arguments
  Error: %s is not a function
  Error: unknown function %s

 Errors related to instructions:
  Error: variable %s holds values of type %s, but got %s
  Error: table %s holds %s, got %s
  Error: table %s expects TInt index, got %s
  Error: dictionary %s is indexed with %s, got %s
  Error: dictionary %s holds %s values, got %s
  Error: %s is not a table or dictionary
  Error: IF condition must be of type TBool, got %s
  Error: WHILE condition must be of type TBool, got %s
  Error: FOR iterator %s should be TInt, but is %s
  Error: RETURN expected %s, but got %s

Interpreter try to help in identyfing incorrect line as much as possible.
Unfortunately, BNFC parser destroys information about location in code for
each symbol, so static checker show only function in which error happened.

Types are displayed in format presented in Abslang.hs, data Type (like in
PHP).

After static check has been done, program code is executed. During execution
types are not checked, so if there is any bug in interpreter's code it may
lead to strange behaviour. All errors beginning with "Runtime: ..." are not
supposed to happen, they are for debugging purposes.

During runtime following errors are caught and handled:
 Execution error: toint can't convert %s
 Execution error: index of %s out of range. Index value: %d
 Execution error: key %s not in dictionary %s
 Runtime error: division by 0!

I use 'standard' semantics, without continuation. Return sets special flag
indicating that next instructions should not be executed. Every instruction
gets InterState (interpreter state) and after finished execution pass
modified environment to the next instruction. I don't use any non-standard
monad, only Err generated by BNFC is in use (and also IO of course).

All values stored in variables are 'pretty printed', so user doesn't see
their internal representation.

Implemented features
=============================
All features I have declared are implemented:
 - 5 base types
 - Arithmetics and comparision
 - while, if statements
 - functions (with recursion)
 - print statement (prints everything, except functions).
 - for loops in Pascal-style
 - support for strings: declarations, concatenation, tostr, toint
 - identifier masking (in blocks and ad-hoc)
 - static typing
 - dynamic handling of runtime errors
 - return statement in functions
 - dictionary type
 - arrays

As far as I know, all features are worth 20 points.

I have also included directory with grammar, 'just in case'. I deleted
one 'good' program, which was obviously incorrect, a few others were
modified to contain print statements.
